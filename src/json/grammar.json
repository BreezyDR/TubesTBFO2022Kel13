{
    "terminal":
    {
        "keywords":
        {
            "BREAK": "break",
            "CONST": "const",
            "CASE": "case",
            "CATCH": "catch",
            "CONTINUE": "continue",
            "DEFAULT": "default",
            "DELETE": "delete",
            "ELSE": "else",
            "FALSE": "false",
            "FINALLY": "finally",
            "FOR": "for",
            "FUNCTION": "function",
            "IF": "if",
            "LET": "let",
            "NULL": "null",
            "RETURN": "return",
            "SWITCH": "switch",
            "THROW": "throw",
            "TRY": "try",
            "TRUE": "true",
            "VAR": "var",
            "WHILE": "while"
        },
        "brackets":
        {
            "CLY_BRACKET_OP": "{",
            "CLY_BRACKET_ED": "}",
            "SQ_BRACKET_OP" : "[",
            "SQ_BRACKET_ED": "]",
            "RD_BRACKET_OP": "(",
            "RD_BRACKET_ED": ")"
        },
        "arith_operator":{
            "POW": "**",
            "MOD": "%",
            "ADD": "+",
            "SUB": "-",
            "MUL": "*",
            "DIV": "/",
            "INC": "++",
            "DEC": "--"
        },
        "logic_operator":{
            "AND": "&&",
            "OR": "||",
            "NOT": "!"
        },
        "ternary_operator":{
            "TEQ": "?"
        },
        "nullish_operator":{
            "NULEQ": "??"
        },
        "assign_operator":{
            "ASSIGN": "=",
            "IMOD": "%=",
            "IADD": "+=",
            "ISUB": "-=",
            "IPOW": "**=",
            "IMUL": "*=",
            "IDIV": "/=",
            "SIZE": ":",
            "COMMA": ","
        },
        "comparison_operator":{
            "EQT": "===",
            "NEQT": "!==",
            "EQ": "==",
            "NEQ": "!=",
            "GE": ">=",
            "LE": "<=",
            "GT": ">",
            "LT": "<"
        },
        "bitwise_operator":{
            "BITAND": "&",
            "BITOR": "|",
            "BITNOT": "~",
            "XOR": "^",
            "LSHFT": "<<",
            "RSHFT": ">>",
            "URSHFT": ">>>"
        },
        "typeof_operator":{
            "TYPEOF": "typeof"
        }
    },



    "grammar":{

        
        
        
    }
}