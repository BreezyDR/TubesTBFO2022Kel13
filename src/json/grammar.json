{
    "terminal":
    {
        "keywords":
        {
            "BREAK": "break",
            "CONST": "const",
            "CASE": "case",
            "CATCH": "catch",
            "CONTINUE": "continue",
            "DEFAULT": "default",
            "DELETE": "delete",
            "ELSE": "else",
            "FALSE": "false",
            "FINALLY": "finally",
            "FOR": "for",
            "FUNCTION": "function",
            "IF": "if",
            "LET": "let",
            "NULL": "null",
            "RETURN": "return",
            "SWITCH": "switch",
            "THROW": "throw",
            "TRY": "try",
            "TRUE": "true",
            "VAR": "var",
            "WHILE": "while"
        },
        "brackets":
        {
            "CLY_BRACKET_OP": "{",
            "CLY_BRACKET_ED": "}",
            "SQ_BRACKET_OP" : "[",
            "SQ_BRACKET_ED": "]",
            "RD_BRACKET_OP": "(",
            "RD_BRACKET_ED": ")"
        },
        "arith_operator":{
            "POW": "**",
            "INC": "++",
            "DEC": "--",

            "MOD": "%",
            "ADD": "+",
            "SUB": "-",
            "MUL": "*",
            "DIV": "/"
        },
        "logic_operator":{
            "AND": "&&",
            "OR": "||",
            "NOT": "!"
        },
        "ternary_operator":{
            "TEQ": "?"
        },
        "nullish_operator":{
            "NULEQ": "??"
        },
        "assign_operator":{
            "IPOW": "**=",
            
            "IMOD": "%=",
            "IADD": "+=",
            "ISUB": "-=",
            "IMUL": "*=",
            "IDIV": "/=",

            "ASSIGN": "=",
            "COLON": ":",
            "COMMA": ","
        },
        "comparison_operator":{
            "EQT": "===",
            "NEQT": "!==",

            "EQ": "==",
            "NEQ": "!=",
            "GE": ">=",
            "LE": "<=",

            "GT": ">",
            "LT": "<"
        },
        "bitwise_operator":{
            "URSHFT": ">>>",

            "LSHFT": "<<",
            "RSHFT": ">>",

            "BITAND": "&",
            "BITOR": "|",
            "BITNOT": "~",
            "XOR": "^"
        },
        "typeof_operator":{
            "TYPEOF": "typeof"
        },
        "line_termination" : {
            "ENDL" : ";"
        }
    },

    "grammar":{
        "ABSOLUTE_START" : [
            "START"
        ],
        "START": [
            "ANY_BLOCK START",
            "IF_BLOCK",
            "FUNCTION_BLOCK",
            "FOR_BLOCK",
            "WHILE_BLOCK",
            "SENTENCE"
            
        ],
        "ANY_BLOCK" : [
            "IF_BLOCK",
            "FUNCTION_BLOCK",
            "FOR_BLOCK",
            "WHILE_BLOCK",
            "SENTENCE",
            "BREAK",
            "STMT"
        ],
        "FUNCTION_BLOCK" : [
            "FUNCTION ID RD_BRACKET_OP FUNCTION_PARAM RD_BRACKET_ED FUNCTION_EXECUTION"
        ],
        "FUNCTION_PARAM" : [
            "ID",
            "ID COMMA FUNCTION FUNCTION_PARAM"
        ],
        "FUNCTION_EXECUTION" : [
            "CLY_BRACKET_OP ANY_BLOCK RETURN CLY_BRACKET_ED",
            "CLY_BRACKET_OP FUNCTION_EXECUTION CLY_BRACKET_ED"
        ],
        "FOR_BLOCK": [
            "FOR LOOP_EXPR FOR_EXECUTION"
        ],
        "FOR_EXECUTION" : [
            "CLY_BRACKET_OP ANY_BLOCK CLY_BRACKET_ED",
            "CLY_BRACKET_OP FOR_EXECUTION CLY_BRACKET_ED"
        ],
        "LOOP_EXPR" : [
            "RD_BRACKET_OP LET ID ASSIGN_OPS ID ENDL ID COMPARISON_OPS ID ENDL ID INC RD_BRACKET_ED",
            "RD_BRACKET_OP LOOP_EXPR RD_BRACKET_ED"
        ],
        "SENTENCE" : [
            "STMT",
            "EXPR",
            "ID"
        ],
        "STMT":[
            "CONST ID ASSIGN_OPS ID ENDL"
        ],
        "LOGIC_EXPR" : [
            "RD_BRACKET_OP LOGIC_STMT RD_BRACKET_ED",
            "RD_BRACKET_OP LOGIC_EXPR RD_BRACKET_ED"
        ],
        "IF_BLOCK" : [
            "IF LOGIC_EXPR EXPR",
            "IF LOGIC_EXPR IF_EXECUTION"
        ],
        "ELSE_BLOCK" : [
            "ELSE IF_BLOCK"
        ],
        "IF_EXECUTION": [
            "CLY_BRACKET_OP STMT CLY_BRACKET_ED",
            "CLY_BRACKET_OP ANY_BLOCK CLY_BRACKET_ED",
            "CLY_BRACKET_OP CLY_BRACKET_ED",
            "CLY_BRACKET_OP IF_EXECUTION CLY_BRACKET_ED",
            "CLY_BRACKET_OP SENTENCE CLY_BRACKET_ED"
        ],
        "WHILE_BLOCK":[
            "WHILE  LOGIC_EXPR WHILE_EXECUTION"
        ],
        "WHILE_EXECUTION" : [
            "CLY_BRACKET_OP WHILE_EXECUTION CLY_BRACKET_ED",
            "CLY_BRACKET_OP ANY_BLOCK CLY_BRACKET_ED"
        ],
        "EXPR" : [
            "ID ASSIGN_OPS ID",
            "ID ASSIGN_OPS ARITH_STMT",
            "ID ASSIGN_OPS LOGIC_STMT",
            "ID ASSIGN_OPS LOGIC_EXPR"
        ],
        "ARITH_STMT" : [
            "ID ARITH_OPS ID",
            "ID ARITH_OPS ARITH_STMT"   
        ],
        "LOGIC_STMT": [
            "TRUE",
            "FALSE",
            "ID COMPARISON_OPS LOGIC_STMT",
            "ID COMPARISON_OPS ID",
            "LOGIC_STMT LOGIC_OPS LOGIC_STMT"
        ],
        "ARITH_OPS" : [
            "POW",
            "INC",
            "DEC",

            "MOD",
            "ADD",
            "SUB",
            "MUL",
            "DIV"
        ],
        "LOGIC_OPS" : [
            "AND",
            "OR",
            "NOT"
        ],
        "ASSIGN_OPS" : [
            "IPOW",
            
            "IMOD",
            "IADD",
            "ISUB",
            "IMUL",
            "IDIV",

            "ASSIGN",
            "COLON",
            "COMMA"
        ],
        "COMPARISON_OPS" : [
            "EQT",
            "NEQT",

            "EQ",
            "NEQ",
            "GE",
            "LE",

            "GT",
            "LT"
        ]

        
        
        
    }
}